--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -1,5 +_,9 @@
 package net.minecraft.server;
 
+// Octopus start
+import ca.spottedleaf.moonrise.common.util.TickThread;
+import org.apache.commons.lang3.tuple.Pair;
+// Octopus end
 import com.google.common.base.Preconditions;
 import com.google.common.base.Splitter;
 import com.google.common.collect.ImmutableList;
@@ -344,10 +_,14 @@
             if (currTime - ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)world).moonrise$getLastMidTickFailure() <= TASK_EXECUTION_FAILURE_BACKOFF) {
                 continue;
             }
-            if (!world.getChunkSource().pollTask()) {
+            if (!world.worldTaskQueueInstance.isFullyHeldByCurrentThread()) { // Octopus
                 // we need to back off if this fails
                 ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)world).moonrise$setLastMidTickFailure(currTime);
             } else {
+                if (!world.worldTaskQueueInstance.pollChunkSystemTask()) { // Octopus
+                    ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)world).moonrise$setLastMidTickFailure(currTime); // Octopus
+                } // Octopus
+
                 executed = true;
             }
         }
@@ -991,6 +_,7 @@
             if (this.hasStopped) return;
             this.hasStopped = true;
         }
+        this.worldTickExecutor.shutdownNow(); // Octopus
         if (!hasLoggedStop && isDebugging()) io.papermc.paper.util.TraceUtil.dumpTraceForThread("Server stopped"); // Paper - Debugging
         shutdownThread = Thread.currentThread(); // Paper - Improved watchdog support
         org.spigotmc.WatchdogThread.doStop(); // Paper - Improved watchdog support
@@ -1432,7 +_,7 @@
             boolean ret = false; // Paper - force execution of all worlds, do not just bias the first
             if (this.tickRateManager.isSprinting() || this.haveTime()) {
                 for (ServerLevel serverLevel : this.getAllLevels()) {
-                    if (serverLevel.getChunkSource().pollTask()) {
+                    if (serverLevel.getChunkSource().pollTask() || (!this.isIteratingOverLevels && serverLevel.worldTaskQueueInstance.pollChunkSystemTask())) { // Octopus
                         ret = true; // Paper - force execution of all worlds, do not just bias the first
                     }
                 }
@@ -1653,6 +_,16 @@
         }
     }
 
+    // Octopus start
+    private final java.util.concurrent.atomic.AtomicInteger threadIdGenerator = new java.util.concurrent.atomic.AtomicInteger(0);
+    private final java.util.concurrent.ExecutorService worldTickExecutor = java.util.concurrent.Executors.newCachedThreadPool(task -> {
+        final TickThread wrapped = new TickThread(task, "Octopus World Tick Worker - " + threadIdGenerator.getAndIncrement());
+        wrapped.setPriority(6);
+        wrapped.setContextClassLoader(MinecraftServer.class.getClassLoader());
+        return wrapped;
+    });
+    // Octopus end
+
     protected void tickChildren(BooleanSupplier hasTimeLeft) {
         ProfilerFiller profilerFiller = Profiler.get();
         this.getPlayerList().getPlayers().forEach(serverPlayer1 -> serverPlayer1.connection.suspendFlushing());
@@ -1704,6 +_,7 @@
         }
 
         this.isIteratingOverLevels = true; // Paper - Throw exception on world create while being ticked
+        final java.util.Deque<java.util.concurrent.Future<Pair<ServerLevel, Throwable>>> tasks = new java.util.ArrayDeque<>();
         for (ServerLevel serverLevel : this.getAllLevels()) {
             serverLevel.hasPhysicsEvent = org.bukkit.event.block.BlockPhysicsEvent.getHandlerList().getRegisteredListeners().length > 0; // Paper - BlockPhysicsEvent
             serverLevel.hasEntityMoveEvent = io.papermc.paper.event.entity.EntityMoveEvent.getHandlerList().getRegisteredListeners().length > 0; // Paper - Add EntityMoveEvent
@@ -1718,20 +_,48 @@
             }
             // CraftBukkit end */
 
-            profilerFiller.push("tick");
+            //profilerFiller.push("tick"); // Octopus
 
+            // Octopus start
+            java.util.concurrent.Callable<Pair<ServerLevel, Throwable>> tickingFunction = () -> {
+            serverLevel.worldTaskQueueInstance.acquirePoller(); // Octopus
             try {
                 serverLevel.tick(hasTimeLeft);
             } catch (Throwable var7) {
-                CrashReport crashReport = CrashReport.forThrowable(var7, "Exception ticking world");
-                serverLevel.fillReportDetails(crashReport);
-                throw new ReportedException(crashReport);
+                return Pair.of(serverLevel, var7);
+            }finally {
+                serverLevel.worldTaskQueueInstance.finalizeScopedTasks();
+                serverLevel.worldTaskQueueInstance.finalizeCyclicalTasks();
+                serverLevel.explosionDensityCache.clear(); // Paper - Optimize explosions // Octopus - Move up
+                serverLevel.worldTaskQueueInstance.releasePoller(); // Octopus
             }
+                return Pair.of(serverLevel, null);
+            };
+            tasks.add(this.worldTickExecutor.submit(tickingFunction)); // Octopus
+            // Octopus end
 
-            profilerFiller.pop();
-            profilerFiller.pop();
+            //profilerFiller.pop(); // Octopus
+            //profilerFiller.pop(); // Octopus
             serverLevel.explosionDensityCache.clear(); // Paper - Optimize explosions
         }
+        // Octopus start
+        java.util.concurrent.Future<Pair<ServerLevel, Throwable>> tickTask;
+        while((tickTask = tasks.poll()) != null) {
+            try {
+                Pair<ServerLevel, Throwable> result = tickTask.get();
+
+                result.getLeft().worldTaskQueueInstance.finalizeCallbackTasks();
+
+                Throwable throwable = result.getRight();
+
+                if (throwable != null) {
+                    throwable.printStackTrace();
+                }
+            } catch (InterruptedException | java.util.concurrent.ExecutionException e) {
+                e.printStackTrace();
+            }
+        }
+        // Octopus end
         this.isIteratingOverLevels = false; // Paper - Throw exception on world create while being ticked
 
         profilerFiller.popPush("connection");
