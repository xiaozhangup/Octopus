From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Daniel Zhang <xiaozhangshiw@163.com>
Date: Thu, 6 Mar 2025 00:55:00 +0800
Subject: [PATCH] Persistent BlockEntity Lore and DisplayName


diff --git a/net/minecraft/world/item/BlockItem.java b/net/minecraft/world/item/BlockItem.java
index 68e50c6ade879d263424f244070677cb81c34c33..246a92dbb95c931f3710927ba8728e6bfd66d1be 100644
--- a/net/minecraft/world/item/BlockItem.java
+++ b/net/minecraft/world/item/BlockItem.java
@@ -152,7 +152,15 @@ public class BlockItem extends Item {
     }
 
     protected boolean updateCustomBlockEntityTag(BlockPos pos, Level level, @Nullable Player player, ItemStack stack, BlockState state) {
-        return updateCustomBlockEntityTag(level, player, pos, stack);
+        // Purpur start
+        boolean handled = updateCustomBlockEntityTag(level, player, pos, stack);
+        BlockEntity blockEntity1 = level.getBlockEntity(pos);
+        if (blockEntity1 != null) {
+            blockEntity1.setPersistentLore(stack.getOrDefault(DataComponents.LORE, net.minecraft.world.item.component.ItemLore.EMPTY));
+        }
+        return handled;
+        // Purpur end
+
     }
 
     @Nullable
diff --git a/net/minecraft/world/level/block/Block.java b/net/minecraft/world/level/block/Block.java
index 976de81d65b6494cdad20f4ec5125fceec86f951..9141ca1af78aa0a3a823222c406ae401c7f90be1 100644
--- a/net/minecraft/world/level/block/Block.java
+++ b/net/minecraft/world/level/block/Block.java
@@ -299,7 +299,7 @@ public class Block extends BlockBehaviour implements ItemLike {
             event.setExpToDrop(block.getExpDrop(state, serverLevel, pos, net.minecraft.world.item.ItemStack.EMPTY, true)); // Paper - Properly handle xp dropping
             event.callEvent();
             for (org.bukkit.inventory.ItemStack drop : event.getDrops()) {
-                popResource(serverLevel, pos, org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(drop));
+                popResource(serverLevel, pos, applyLoreFromTile(org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(drop), blockEntity));
             }
             state.spawnAfterBreak(serverLevel, pos, ItemStack.EMPTY, false); // Paper - Properly handle xp dropping
             block.popExperience(serverLevel, pos, event.getExpToDrop()); // Paper - Properly handle xp dropping
@@ -310,14 +310,14 @@ public class Block extends BlockBehaviour implements ItemLike {
 
     public static void dropResources(BlockState state, Level level, BlockPos pos) {
         if (level instanceof ServerLevel) {
-            getDrops(state, (ServerLevel)level, pos, null).forEach(itemStack -> popResource(level, pos, itemStack));
+            getDrops(state, (ServerLevel)level, pos, null).forEach(itemStack -> popResource(level, pos, applyLoreFromTile(itemStack, null)));
             state.spawnAfterBreak((ServerLevel)level, pos, ItemStack.EMPTY, true);
         }
     }
 
     public static void dropResources(BlockState state, LevelAccessor level, BlockPos pos, @Nullable BlockEntity blockEntity) {
         if (level instanceof ServerLevel) {
-            getDrops(state, (ServerLevel)level, pos, blockEntity).forEach(itemStack -> popResource((ServerLevel)level, pos, itemStack));
+            getDrops(state, (ServerLevel)level, pos, blockEntity).forEach(itemStack -> popResource((ServerLevel)level, pos, applyLoreFromTile(itemStack, blockEntity)));
             state.spawnAfterBreak((ServerLevel)level, pos, ItemStack.EMPTY, true);
         }
     }
@@ -329,11 +329,27 @@ public class Block extends BlockBehaviour implements ItemLike {
     public static void dropResources(BlockState state, Level level, BlockPos pos, @Nullable BlockEntity blockEntity, @Nullable Entity entity, ItemStack tool, boolean dropExperience) {
     // Paper end - Properly handle xp dropping
         if (level instanceof ServerLevel) {
-            getDrops(state, (ServerLevel)level, pos, blockEntity, entity, tool).forEach(itemStack -> popResource(level, pos, itemStack));
+            getDrops(state, (ServerLevel)level, pos, blockEntity, entity, tool).forEach(itemStack -> popResource(level, pos, applyLoreFromTile(itemStack, blockEntity)));
             state.spawnAfterBreak((ServerLevel) level, pos, tool, dropExperience); // Paper - Properly handle xp dropping
         }
     }
 
+    // Purpur start
+    private static ItemStack applyLoreFromTile(ItemStack stack, @Nullable BlockEntity blockEntity) {
+        if (stack.getItem() instanceof BlockItem) {
+            if (blockEntity != null && blockEntity.getLevel() instanceof ServerLevel) {
+                net.minecraft.world.item.component.ItemLore lore = blockEntity.getPersistentLore();
+                net.minecraft.core.component.DataComponentPatch.Builder builder = net.minecraft.core.component.DataComponentPatch.builder();
+                if (lore != null) {
+                    builder.set(net.minecraft.core.component.DataComponents.LORE, lore);
+                }
+                stack.applyComponents(builder.build());
+            }
+        }
+        return stack;
+    }
+    // Purpur end
+
     public static void popResource(Level level, BlockPos pos, ItemStack stack) {
         double d = EntityType.ITEM.getHeight() / 2.0;
         double d1 = pos.getX() + 0.5 + Mth.nextDouble(level.random, -0.25, 0.25);
diff --git a/net/minecraft/world/level/block/entity/BlockEntity.java b/net/minecraft/world/level/block/entity/BlockEntity.java
index 77618757c0e678532dbab814aceed83f7f1cd892..2e6712d599a380370b7a82561fb729aa698383e6 100644
--- a/net/minecraft/world/level/block/entity/BlockEntity.java
+++ b/net/minecraft/world/level/block/entity/BlockEntity.java
@@ -83,6 +83,12 @@ public abstract class BlockEntity {
         if (persistentDataTag instanceof CompoundTag) {
             this.persistentDataContainer.putAll((CompoundTag) persistentDataTag);
         }
+        // Purpur start
+        if (tag.contains("Purpur.persistentLore")) {
+            net.minecraft.world.item.component.ItemLore.CODEC.decode(net.minecraft.nbt.NbtOps.INSTANCE, tag.getCompound("Purpur.persistentLore")).result()
+                    .ifPresent(tagPair -> this.persistentLore = tagPair.getFirst());
+        }
+        // Purpur end
         // Paper end - read persistent data container
     }
 
@@ -98,6 +104,15 @@ public abstract class BlockEntity {
         this.loadAdditional(tag, registries);
     }
 
+    // Purpur start
+    protected void saveAdditional(CompoundTag nbt) {
+        if (this.persistentLore != null) {
+            net.minecraft.world.item.component.ItemLore.CODEC.encodeStart(net.minecraft.nbt.NbtOps.INSTANCE, this.persistentLore).result()
+                    .ifPresent(tag -> nbt.put("Purpur.persistentLore", tag));
+        }
+    }
+    // Purpur end
+
     protected void saveAdditional(CompoundTag tag, HolderLookup.Provider registries) {
     }
 
@@ -378,4 +393,17 @@ public abstract class BlockEntity {
 
         <T> T getOrDefault(DataComponentType<? extends T> component, T defaultValue);
     }
+
+    // Purpur start
+    @Nullable
+    private net.minecraft.world.item.component.ItemLore persistentLore = null;
+
+    public void setPersistentLore(net.minecraft.world.item.component.ItemLore lore) {
+        this.persistentLore = lore;
+    }
+
+    public @org.jetbrains.annotations.Nullable net.minecraft.world.item.component.ItemLore getPersistentLore() {
+        return this.persistentLore;
+    }
+    // Purpur end
 }
