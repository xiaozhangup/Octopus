From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Daniel Zhang <xiaozhangshiw@163.com>
Date: Tue, 25 Feb 2025 00:39:01 +0800
Subject: [PATCH] RecipeManager Optimize


diff --git a/net/minecraft/world/item/crafting/RecipeManager.java b/net/minecraft/world/item/crafting/RecipeManager.java
index aefaac550b58be479cc282f52dea91d4b1e530f6..2877a3229e03285e9ba5ec2bb68e17c9da202816 100644
--- a/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/net/minecraft/world/item/crafting/RecipeManager.java
@@ -167,7 +167,7 @@ public class RecipeManager extends SimplePreparableReloadListener<RecipeMap> imp
 
     public <I extends RecipeInput, T extends Recipe<I>> Optional<RecipeHolder<T>> getRecipeFor(RecipeType<T> recipeType, I input, Level level) {
         // CraftBukkit start
-        List<RecipeHolder<T>> list = this.recipes.getRecipesFor(recipeType, input, level).toList();
+        List<RecipeHolder<T>> list = this.recipes.getRecipesForList(recipeType, input, level); // DivineMC - Carpet-Fixes - Remove streams to be faster
         return (list.isEmpty()) ? Optional.empty() : Optional.of(list.getLast()); // CraftBukkit - SPIGOT-4638: last recipe gets priority
         // CraftBukkit end
     }
diff --git a/net/minecraft/world/item/crafting/RecipeMap.java b/net/minecraft/world/item/crafting/RecipeMap.java
index 098753ddd215b6ef5915fac71d8c4f0b19cf4142..1778e58dca9430756d59d07bf017ebe4cc1f4ed4 100644
--- a/net/minecraft/world/item/crafting/RecipeMap.java
+++ b/net/minecraft/world/item/crafting/RecipeMap.java
@@ -75,4 +75,24 @@ public class RecipeMap {
     public <I extends RecipeInput, T extends Recipe<I>> Stream<RecipeHolder<T>> getRecipesFor(RecipeType<T> type, I input, Level level) {
         return input.isEmpty() ? Stream.empty() : this.byType(type).stream().filter(recipeHolder -> recipeHolder.value().matches(input, level));
     }
+
+    // DivineMC start - Carpet-Fixes - Remove streams to be faster
+    public <I extends RecipeInput, T extends Recipe<I>> java.util.List<RecipeHolder<T>> getRecipesForList(RecipeType<T> type, I input, Level world) {
+        java.util.List<RecipeHolder<T>> list;
+
+        if (input.isEmpty()) {
+            return java.util.List.of();
+        } else {
+            list = new java.util.ArrayList<>();
+        }
+
+        for (RecipeHolder<T> recipeholder : this.byType(type)) {
+            if (recipeholder.value().matches(input, world)) {
+                list.add(recipeholder);
+            }
+        }
+
+        return list;
+    }
+    // DivineMC end - Carpet-Fixes - Remove streams to be faster
 }
