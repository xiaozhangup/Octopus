From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Daniel Zhang <xiaozhangshiw@163.com>
Date: Thu, 6 Mar 2025 00:36:09 +0800
Subject: [PATCH] Alternative Keepalive Handling


diff --git a/net/minecraft/server/network/ServerCommonPacketListenerImpl.java b/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
index af75f1ca60dc01045f27cb550ac9e3deacf1a1cf..347dd7e0c52b805eb7b869e55424173610408021 100644
--- a/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
@@ -41,6 +41,7 @@ public abstract class ServerCommonPacketListenerImpl implements ServerCommonPack
     private long keepAliveChallenge;
     private long closedListenerTime;
     private boolean closed = false;
+    private it.unimi.dsi.fastutil.longs.LongList keepAlives = new it.unimi.dsi.fastutil.longs.LongArrayList(); // Purpur
     private int latency;
     private volatile boolean suspendFlushingOnServerThread = false;
     // CraftBukkit start
@@ -118,13 +119,14 @@ public abstract class ServerCommonPacketListenerImpl implements ServerCommonPack
 
     @Override
     public void handleKeepAlive(ServerboundKeepAlivePacket packet) {
-        if (this.keepAlivePending && packet.getId() == this.keepAliveChallenge) {
-            int i = (int)(Util.getMillis() - this.keepAliveTime);
-            this.latency = (this.latency * 3 + i) / 4;
+        // Purpur start
+        if (this.keepAlivePending && !keepAlives.isEmpty() && keepAlives.contains(packet.getId())) {
+            int ping = (int) (Util.getMillis() - packet.getId());
+            this.latency = (this.latency * 3 + ping) / 4;
             this.keepAlivePending = false;
-        } else if (!this.isSingleplayerOwner()) {
-            this.disconnectAsync(TIMEOUT_DISCONNECTION_MESSAGE, org.bukkit.event.player.PlayerKickEvent.Cause.TIMEOUT); // Paper - add proper async disconnect
+            keepAlives.clear(); // we got a valid response, lets roll with it and forget the rest
         }
+        // Purpur end
     }
 
     @Override
@@ -242,19 +244,19 @@ public abstract class ServerCommonPacketListenerImpl implements ServerCommonPack
         // Paper start - give clients a longer time to respond to pings as per pre 1.12.2 timings
         // This should effectively place the keepalive handling back to "as it was" before 1.12.2
         final long elapsedTime = millis - this.keepAliveTime;
-        if (!this.isSingleplayerOwner() && elapsedTime >= 15000L) { // use vanilla's 15000L between keep alive packets
-            if (this.keepAlivePending) {
-                if (!this.processedDisconnect && elapsedTime >= KEEPALIVE_LIMIT) { // check keepalive limit, don't fire if already disconnected
-                    this.disconnect(TIMEOUT_DISCONNECTION_MESSAGE, org.bukkit.event.player.PlayerKickEvent.Cause.TIMEOUT); // Paper - kick event cause
-                }
-                // Paper end - give clients a longer time to respond to pings as per pre 1.12.2 timings
+
+        // Purpur start
+        if (elapsedTime >= 1000L) { // 1 second
+            if (this.keepAlivePending && !this.processedDisconnect && keepAlives.size() * 1000L >= KEEPALIVE_LIMIT) {
+                this.disconnect(ServerCommonPacketListenerImpl.TIMEOUT_DISCONNECTION_MESSAGE, org.bukkit.event.player.PlayerKickEvent.Cause.TIMEOUT);
             } else if (this.checkIfClosed(millis)) {
                 this.keepAlivePending = true;
-                this.keepAliveTime = millis;
-                this.keepAliveChallenge = millis;
-                this.send(new ClientboundKeepAlivePacket(this.keepAliveChallenge));
+                this.keepAliveTime = millis; // hijack this field for 1 second intervals
+                this.keepAlives.add(millis); // currentTime is ID
+                this.send(new ClientboundKeepAlivePacket(millis));
             }
         }
+        // Purpur end
 
         Profiler.get().pop();
     }
