From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: xiaozhangup <xiaozhangshiw@163.com>
Date: Thu, 24 Jul 2025 23:31:22 +0800
Subject: [PATCH] Custom PlayerDataStorage


diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 32fe51b19323e3c4c56e7f9e621e6e808ee5fe38..37a5db1689c7c1f7ae0d56afbda928f845363ca8 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -3064,6 +3064,78 @@ public final class CraftServer implements Server {
         return this.adventure$audiences;
     }
 
+    @Override
+    public void setProfileSource(@Nullable me.xiaozhangup.octopus.ProfileSource source) {
+        if (source == null) {
+            MinecraftServer.getServer().getPlayerList().playerIo.setDataSource(null);
+            return;
+        }
+        MinecraftServer.getServer().getPlayerList().playerIo.setDataSource(
+                new me.xiaozhangup.octopus.PlayerDataSource() {
+                    @Override
+                    public boolean save(net.minecraft.world.entity.player.Player player, net.minecraft.nbt.CompoundTag data) throws IOException {
+                        ByteArrayOutputStream outStream = new ByteArrayOutputStream();
+                        net.minecraft.nbt.NbtIo.writeCompressed(data, outStream);
+                        return source.save(((ServerPlayer) player).getBukkitEntity(), outStream.toByteArray());
+                    }
+
+                    @Override
+                    public Optional<net.minecraft.nbt.CompoundTag> load(net.minecraft.world.entity.player.Player player) throws IOException {
+                        Optional<byte[]> data = source.load(((ServerPlayer) player).getBukkitEntity());
+                        if (data.isEmpty()) return Optional.empty();
+                        java.io.ByteArrayInputStream inStream = new java.io.ByteArrayInputStream(data.get());
+                        return Optional.of(net.minecraft.nbt.NbtIo.readCompressed(inStream, net.minecraft.nbt.NbtAccounter.unlimitedHeap()));
+                    }
+
+                    @Override
+                    public Optional<net.minecraft.nbt.CompoundTag> load(String playerName, String uuid) throws IOException {
+                        Optional<byte[]> data = source.load(playerName, uuid);
+                        if (data.isEmpty()) return Optional.empty();
+                        java.io.ByteArrayInputStream inStream = new java.io.ByteArrayInputStream(data.get());
+                        return Optional.of(net.minecraft.nbt.NbtIo.readCompressed(inStream, net.minecraft.nbt.NbtAccounter.unlimitedHeap()));
+                    }
+                }
+        );
+    }
+
+    @Override
+    public void setStatsSource(@Nullable me.xiaozhangup.octopus.JsonDataSource source) {
+        if (source == null) {
+            MinecraftServer.getServer().statsSource = null;
+            return;
+        }
+        MinecraftServer.getServer().statsSource = new me.xiaozhangup.octopus.PlayerJsonDataSource() {
+            @Override
+            public void save(String json, String uuid) {
+                source.save(json, uuid);
+            }
+
+            @Override
+            public @Nullable String load(String uuid) {
+                return source.load(uuid);
+            }
+        };
+    }
+
+    @Override
+    public void setAchievementsSource(@Nullable me.xiaozhangup.octopus.JsonDataSource source) {
+        if (source == null) {
+            MinecraftServer.getServer().achievementsSource = null;
+            return;
+        }
+        MinecraftServer.getServer().achievementsSource = new me.xiaozhangup.octopus.PlayerJsonDataSource() {
+            @Override
+            public void save(String json, String uuid) {
+                source.save(json, uuid);
+            }
+
+            @Override
+            public @Nullable String load(String uuid) {
+                return source.load(uuid);
+            }
+        };
+    }
+
     @Override
     public void reloadPermissions() {
         pluginManager.clearPermissions();
