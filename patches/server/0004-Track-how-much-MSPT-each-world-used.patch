From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Daniel Zhang <xiaozhangshiw@163.com>
Date: Thu, 10 Oct 2024 23:51:57 +0800
Subject: [PATCH] Track how much MSPT each world used


diff --git a/src/main/java/io/papermc/paper/command/MSPTCommand.java b/src/main/java/io/papermc/paper/command/MSPTCommand.java
index 8b5293b0c696ef21d0101493ffa41b60bf0bc86b..601198a33adb29316b0617d5390d1620b7c1095c 100644
--- a/src/main/java/io/papermc/paper/command/MSPTCommand.java
+++ b/src/main/java/io/papermc/paper/command/MSPTCommand.java
@@ -78,6 +78,46 @@ public final class MSPTCommand extends Command {
                 )
             )
         );
+
+        // SparklyPaper start - track world's MSPT
+        sender.sendMessage(text());
+        sender.sendMessage(text().content("World tick times ").color(GOLD)
+            .append(text().color(YELLOW)
+                .append(
+                    text("("),
+                    text("avg", GRAY),
+                    text("/"),
+                    text("min", GRAY),
+                    text("/"),
+                    text("max", GRAY),
+                    text(")")
+                )
+            ).append(
+                text(" from last 5s"),
+                text(",", GRAY),
+                text(" 10s"),
+                text(",", GRAY),
+                text(" 1m"),
+                text(":", YELLOW)
+            )
+        );
+        for (net.minecraft.server.level.ServerLevel serverLevel : server.getAllLevels()) {
+            List<Component> worldTimes = new ArrayList<>();
+            worldTimes.addAll(eval(serverLevel.tickTimes5s.getTimes()));
+            worldTimes.addAll(eval(serverLevel.tickTimes10s.getTimes()));
+            worldTimes.addAll(eval(serverLevel.tickTimes60s.getTimes()));
+
+            sender.sendMessage(text().content("â—´ " + serverLevel.getWorld().getName() + ": ").color(GOLD)
+                .append(text().color(GRAY)
+                    .append(
+                        worldTimes.get(0), SLASH, worldTimes.get(1), SLASH, worldTimes.get(2), text(", ", YELLOW),
+                        worldTimes.get(3), SLASH, worldTimes.get(4), SLASH, worldTimes.get(5), text(", ", YELLOW),
+                        worldTimes.get(6), SLASH, worldTimes.get(7), SLASH, worldTimes.get(8)
+                    )
+                )
+            );
+        }
+        // SparklyPaper end
         return true;
     }
 
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index e78bbaaccf4787d47386870f9818e1fdaa3aa148..5a399d0bd1d725d4fc5607bfa918bee80f5a6698 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1863,7 +1863,17 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
             try {
                 //worldserver.timings.doTick.startTiming(); // Spigot // Purpur
+                long i = Util.getNanos(); // Octopus
                 worldserver.tick(shouldKeepTicking);
+
+                // Octopus start
+                long j = Util.getNanos() - i;
+
+                // These are from the "tickServer" function
+                worldserver.tickTimes5s.add(this.tickCount, j);
+                worldserver.tickTimes10s.add(this.tickCount, j);
+                worldserver.tickTimes60s.add(this.tickCount, j);
+                // Octopus end
                 //worldserver.timings.doTick.stopTiming(); // Spigot // Purpur
             } catch (Throwable throwable) {
                 CrashReport crashreport = CrashReport.forThrowable(throwable, "Exception ticking world");
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 067b10134b087626e05596225744b905211e8b63..551f2b2fc8f8830f35bb88045b30bee20424d2b1 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -500,6 +500,12 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
     }
     // Paper end - lag compensation
 
+    // SparklyPaper start - track world's MSPT
+    public final MinecraftServer.TickTimes tickTimes5s = new MinecraftServer.TickTimes(100);
+    public final MinecraftServer.TickTimes tickTimes10s = new MinecraftServer.TickTimes(200);
+    public final MinecraftServer.TickTimes tickTimes60s = new MinecraftServer.TickTimes(1200);
+    // SparklyPaper end
+
     // Add env and gen to constructor, IWorldDataServer -> WorldDataServer
     public ServerLevel(MinecraftServer minecraftserver, Executor executor, LevelStorageSource.LevelStorageAccess convertable_conversionsession, PrimaryLevelData iworlddataserver, ResourceKey<Level> resourcekey, LevelStem worlddimension, ChunkProgressListener worldloadlistener, boolean flag, long i, List<CustomSpawner> list, boolean flag1, @Nullable RandomSequences randomsequences, org.bukkit.World.Environment env, org.bukkit.generator.ChunkGenerator gen, org.bukkit.generator.BiomeProvider biomeProvider) {
         // IRegistryCustom.Dimension iregistrycustom_dimension = minecraftserver.registryAccess(); // CraftBukkit - decompile error
