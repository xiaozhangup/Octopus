From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrHua269 <wangxyper@163.com>
Date: Sat, 2 Nov 2024 20:39:25 +0800
Subject: [PATCH] Parallel world ticking


diff --git a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkTaskScheduler.java b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkTaskScheduler.java
index 8671a90e969d16c7a57ddc38fedb7cf01815f64c..c36336b8b3d3b0b3967546be30bfe8f083d58195 100644
--- a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkTaskScheduler.java
+++ b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkTaskScheduler.java
@@ -562,7 +562,7 @@ public final class ChunkTaskScheduler {
 
         // we could do a simple spinwait here, since we do not need to process tasks while performing this load
         // but we process tasks only because it's a better use of the time spent
-        this.world.getChunkSource().mainThreadProcessor.managedBlock(() -> {
+        this.world.worldTaskQueueInstance.chunkSystemSpinBlocking(() -> { // Octopus
             return ((ChunkSystemServerLevel)this.world).moonrise$getSpecificChunkIfLoaded(chunkX, chunkZ, status) != null;
         });
 
diff --git a/src/main/java/i/xiaozhangup/octopus/WorldTaskQueue.java b/src/main/java/i/xiaozhangup/octopus/WorldTaskQueue.java
new file mode 100644
index 0000000000000000000000000000000000000000..e468eec486e10a89f0156e992f18650e2f632512
--- /dev/null
+++ b/src/main/java/i/xiaozhangup/octopus/WorldTaskQueue.java
@@ -0,0 +1,168 @@
+package i.xiaozhangup.octopus;
+
+import com.mojang.logging.LogUtils;
+import net.minecraft.DefaultUncaughtExceptionHandler;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+
+import java.util.Queue;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.concurrent.ConcurrentMap;
+import java.util.concurrent.locks.LockSupport;
+import java.util.function.BooleanSupplier;
+
+public class WorldTaskQueue {
+    private final Thread.UncaughtExceptionHandler exceptionHandler = new DefaultUncaughtExceptionHandler(LogUtils.getLogger());
+
+    private final Queue<Runnable> chunkSystemTasks = new ConcurrentLinkedQueue<>();
+    private final Queue<Runnable> scopedTasks = new ConcurrentLinkedQueue<>();
+    private final Queue<Runnable> callbackTasks = new ConcurrentLinkedQueue<>();
+    private final ConcurrentMap<String, Runnable> cyclicalTasks = new ConcurrentHashMap<>();
+    private final ServerLevel world;
+
+    private volatile Thread currentOwner;
+
+    public WorldTaskQueue(ServerLevel world) {
+        this.world = world;
+    }
+
+    public void acquirePoller() {
+        if (this.currentOwner != null)
+            throw new IllegalStateException("Task queue already owned by " + this.currentOwner);
+
+        this.currentOwner = Thread.currentThread();
+    }
+
+    public void submitScopedTask(Runnable runnable) {
+        this.scopedTasks.offer(runnable);
+        this.notifyPollerIfNotReleased();
+    }
+
+    public void submitCallbackTask(Runnable task) {
+        this.callbackTasks.offer(task);
+    }
+
+    public void submitCyclicalTask(String id, Runnable task) {
+        this.cyclicalTasks.put(id, task);
+    }
+
+    public Runnable removeCyclicalTask(String id) {
+        return this.cyclicalTasks.remove(id);
+    }
+
+    public void finalizeCallbackTasks() {
+        if (this.currentOwner != null)
+            throw new IllegalStateException("Queue doesn't get out of using state!");
+
+        Runnable task;
+        while ((task = this.scopedTasks.poll()) != null) {
+            try {
+                task.run();
+            }catch (Exception e){
+                this.exceptionHandler.uncaughtException(Thread.currentThread(), e);
+            }
+        }
+    }
+
+    public void finalizeScopedTasks() {
+        if (!this.isFullyHeldByCurrentThread()) {
+            throw new IllegalStateException("Task queue not owned by current thread!");
+        }
+
+        Runnable task;
+        while ((task = this.callbackTasks.poll()) != null) {
+            try {
+                task.run();
+            }catch (Exception e){
+                this.exceptionHandler.uncaughtException(Thread.currentThread(), e);
+            }
+        }
+    }
+
+    public void finalizeCyclicalTasks() {
+        cyclicalTasks.forEach((id, task) -> {
+            try {
+                task.run();
+            }catch (Exception e){
+                MinecraftServer.LOGGER.error("Error executing task on {}, in {}", this.world.getWorld().getName(), id);
+                this.exceptionHandler.uncaughtException(Thread.currentThread(), e);
+            }
+        });
+    }
+
+    public void submitChunkSystemTask(Runnable runnable) {
+        this.chunkSystemTasks.offer(runnable);
+        this.notifyPollerIfNotReleased();
+    }
+
+    public int chunkSystemTaskQueueSize() {
+        return this.chunkSystemTasks.size();
+    }
+
+    public boolean pollChunkSystemTask() {
+        if (this.isHeldByAnyThread() && !this.isFullyHeldByCurrentThread()) {
+            throw new IllegalStateException("Task queue not owned by current thread!");
+        }
+
+        if (this.world.getChunkSource().runDistanceManagerUpdates()) {
+            return true;
+        }
+
+        Runnable runnable = this.chunkSystemTasks.poll();
+
+        if (runnable != null) {
+            try {
+                runnable.run();
+            }catch (Exception e){
+                this.exceptionHandler.uncaughtException(Thread.currentThread(), e);
+            }
+            return true;
+        }
+
+        return this.world.moonrise$getChunkTaskScheduler().executeMainThreadTask();
+    }
+
+    public void chunkSystemSpinBlocking(BooleanSupplier stopCondition) {
+        while (!stopCondition.getAsBoolean()) {
+            if (!this.pollChunkSystemTask()) {
+                LockSupport.parkNanos(1_000);
+            }
+        }
+    }
+
+    public void notifyPollerIfNotReleased() {
+        Thread currentHeld = this.currentOwner;
+
+        if (currentHeld != null) {
+            LockSupport.unpark(currentHeld);
+        }
+    }
+
+    public void notifyPoller() {
+        Thread currentHeld = this.currentOwner;
+
+        if (currentHeld == null)
+            throw new IllegalStateException("Task queue not owned by any thread");
+
+        LockSupport.unpark(currentHeld);
+    }
+
+    public void releasePoller() {
+        if (this.currentOwner == null)
+            throw new IllegalStateException("Task queue not owned by any thread");
+
+        this.currentOwner = null;
+    }
+
+    public boolean isHeldByAnyThread() {
+        return this.currentOwner != null;
+    }
+
+    public boolean isFullyHeldByCurrentThread() {
+        if (this.currentOwner == null)
+            return false;
+
+        return this.currentOwner == Thread.currentThread();
+    }
+}
diff --git a/src/main/java/net/minecraft/core/dispenser/BoatDispenseItemBehavior.java b/src/main/java/net/minecraft/core/dispenser/BoatDispenseItemBehavior.java
index 6df0db8b4cdab23494ea34236949ece4989110a3..9fe1b9d292e4686ac76596b4b52c579e067c5b8c 100644
--- a/src/main/java/net/minecraft/core/dispenser/BoatDispenseItemBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/BoatDispenseItemBehavior.java
@@ -63,7 +63,7 @@ public class BoatDispenseItemBehavior extends DefaultDispenseItemBehavior {
         CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
 
         BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(d1, d2 + d4, d3));
-        if (!DispenserBlock.eventFired) {
+        if (!DispenserBlock.eventFired.get()) { // Octopus
             worldserver.getCraftServer().getPluginManager().callEvent(event);
         }
 
diff --git a/src/main/java/net/minecraft/core/dispenser/DefaultDispenseItemBehavior.java b/src/main/java/net/minecraft/core/dispenser/DefaultDispenseItemBehavior.java
index 39c96f5db6e90a470404c6387fa0c1d5531822e5..502d64685c3b2b4676ad6d8c0a741c2f52216b74 100644
--- a/src/main/java/net/minecraft/core/dispenser/DefaultDispenseItemBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/DefaultDispenseItemBehavior.java
@@ -87,7 +87,7 @@ public class DefaultDispenseItemBehavior implements DispenseItemBehavior {
         CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack);
 
         BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), CraftVector.toBukkit(entityitem.getDeltaMovement()));
-        if (!DispenserBlock.eventFired) {
+        if (!DispenserBlock.eventFired.get()) { // Octopus
             world.getCraftServer().getPluginManager().callEvent(event);
         }
 
diff --git a/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java b/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
index bd07743817f2510c179614a6215434e7b333824a..cc38843ca458fb7899816afe3eecd562276353fa 100644
--- a/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
@@ -115,7 +115,7 @@ public interface DispenseItemBehavior {
                 CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
 
                 BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(0, 0, 0));
-                if (!DispenserBlock.eventFired) {
+                if (!DispenserBlock.eventFired.get()) { // Octopus
                     worldserver.getCraftServer().getPluginManager().callEvent(event);
                 }
 
@@ -174,7 +174,7 @@ public interface DispenseItemBehavior {
                 CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
 
                 BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(0, 0, 0));
-                if (!DispenserBlock.eventFired) {
+                if (!DispenserBlock.eventFired.get()) { // Octopus
                     worldserver.getCraftServer().getPluginManager().callEvent(event);
                 }
 
@@ -229,7 +229,7 @@ public interface DispenseItemBehavior {
                     CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
 
                     BlockDispenseArmorEvent event = new BlockDispenseArmorEvent(block, craftItem.clone(), (org.bukkit.craftbukkit.entity.CraftLivingEntity) list.get(0).getBukkitEntity());
-                    if (!DispenserBlock.eventFired) {
+                    if (!DispenserBlock.eventFired.get()) { // Octopus
                         world.getCraftServer().getPluginManager().callEvent(event);
                     }
 
@@ -285,7 +285,7 @@ public interface DispenseItemBehavior {
                 CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
 
                 BlockDispenseArmorEvent event = new BlockDispenseArmorEvent(block, craftItem.clone(), (org.bukkit.craftbukkit.entity.CraftLivingEntity) entityhorseabstract.getBukkitEntity());
-                if (!DispenserBlock.eventFired) {
+                if (!DispenserBlock.eventFired.get()) { // Octopus
                     world.getCraftServer().getPluginManager().callEvent(event);
                 }
 
@@ -359,7 +359,7 @@ public interface DispenseItemBehavior {
                 CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
 
                 BlockDispenseArmorEvent event = new BlockDispenseArmorEvent(block, craftItem.clone(), (org.bukkit.craftbukkit.entity.CraftLivingEntity) entityhorsechestedabstract.getBukkitEntity());
-                if (!DispenserBlock.eventFired) {
+                if (!DispenserBlock.eventFired.get()) { // Octopus
                     world.getCraftServer().getPluginManager().callEvent(event);
                 }
 
@@ -431,7 +431,7 @@ public interface DispenseItemBehavior {
                     CraftItemStack craftItem = CraftItemStack.asCraftMirror(stack.copyWithCount(1)); // Paper - single item in event
 
                     BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(x, y, z));
-                    if (!DispenserBlock.eventFired) {
+                    if (!DispenserBlock.eventFired.get()) { // Octopus
                         worldserver.getCraftServer().getPluginManager().callEvent(event);
                     }
 
@@ -496,7 +496,7 @@ public interface DispenseItemBehavior {
                         CraftItemStack craftItem = CraftItemStack.asCraftMirror(stack.copyWithCount(1)); // Paper - single item in event
 
                         BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(blockposition.getX(), blockposition.getY(), blockposition.getZ()));
-                        if (!DispenserBlock.eventFired) {
+                        if (!DispenserBlock.eventFired.get()) { // Octopus
                             worldserver.getCraftServer().getPluginManager().callEvent(event);
                         }
 
@@ -534,7 +534,7 @@ public interface DispenseItemBehavior {
                 CraftItemStack craftItem = CraftItemStack.asCraftMirror(stack); // Paper - ignore stack size on damageable items
 
                 BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(0, 0, 0));
-                if (!DispenserBlock.eventFired) {
+                if (!DispenserBlock.eventFired.get()) { // Octopus
                     worldserver.getCraftServer().getPluginManager().callEvent(event);
                 }
 
@@ -596,7 +596,7 @@ public interface DispenseItemBehavior {
                 CraftItemStack craftItem = CraftItemStack.asCraftMirror(stack.copyWithCount(1)); // Paper - single item in event
 
                 BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(0, 0, 0));
-                if (!DispenserBlock.eventFired) {
+                if (!DispenserBlock.eventFired.get()) { // Octopus
                     worldserver.getCraftServer().getPluginManager().callEvent(event);
                 }
 
@@ -625,8 +625,8 @@ public interface DispenseItemBehavior {
                 // CraftBukkit start
                 worldserver.captureTreeGeneration = false;
                 if (worldserver.capturedBlockStates.size() > 0) {
-                    TreeType treeType = SaplingBlock.treeType;
-                    SaplingBlock.treeType = null;
+                    TreeType treeType = SaplingBlock.treeTypeRT.get(); // Octopus
+                    SaplingBlock.treeTypeRT.set(null); // Octopus
                     Location location = CraftLocation.toBukkit(blockposition, worldserver.getWorld());
                     List<org.bukkit.block.BlockState> blocks = new java.util.ArrayList<>(worldserver.capturedBlockStates.values());
                     worldserver.capturedBlockStates.clear();
@@ -665,7 +665,7 @@ public interface DispenseItemBehavior {
                 CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
 
                 BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector((double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D));
-                if (!DispenserBlock.eventFired) {
+                if (!DispenserBlock.eventFired.get()) { // Octopus
                    worldserver.getCraftServer().getPluginManager().callEvent(event);
                 }
 
@@ -722,7 +722,7 @@ public interface DispenseItemBehavior {
                 CraftItemStack craftItem = CraftItemStack.asCraftMirror(stack.copyWithCount(1)); // Paper - single item in event
 
                 BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(blockposition.getX(), blockposition.getY(), blockposition.getZ()));
-                if (!DispenserBlock.eventFired) {
+                if (!DispenserBlock.eventFired.get()) { // Octopus
                     worldserver.getCraftServer().getPluginManager().callEvent(event);
                 }
 
@@ -771,7 +771,7 @@ public interface DispenseItemBehavior {
                 CraftItemStack craftItem = CraftItemStack.asCraftMirror(stack.copyWithCount(1)); // Paper - single item in event
 
                 BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(blockposition.getX(), blockposition.getY(), blockposition.getZ()));
-                if (!DispenserBlock.eventFired) {
+                if (!DispenserBlock.eventFired.get()) { // Octopus
                     worldserver.getCraftServer().getPluginManager().callEvent(event);
                 }
 
@@ -833,7 +833,7 @@ public interface DispenseItemBehavior {
                 CraftItemStack craftItem = CraftItemStack.asCraftMirror(stack.copyWithCount(1)); // Paper - only single item in event
 
                 BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(blockposition.getX(), blockposition.getY(), blockposition.getZ()));
-                if (!DispenserBlock.eventFired) {
+                if (!DispenserBlock.eventFired.get()) { // Octopus
                     worldserver.getCraftServer().getPluginManager().callEvent(event);
                 }
 
@@ -915,7 +915,7 @@ public interface DispenseItemBehavior {
                     CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
 
                     BlockDispenseEvent event = new BlockDispenseArmorEvent(block, craftItem.clone(), (org.bukkit.craftbukkit.entity.CraftLivingEntity) list.get(0).getBukkitEntity());
-                    if (!DispenserBlock.eventFired) {
+                    if (!DispenserBlock.eventFired.get()) {
                         world.getCraftServer().getPluginManager().callEvent(event);
                     }
 
diff --git a/src/main/java/net/minecraft/core/dispenser/ProjectileDispenseBehavior.java b/src/main/java/net/minecraft/core/dispenser/ProjectileDispenseBehavior.java
index e37d2d29f3ba67cfe28abe4847a3dca07121f0be..1635ae6106ee751704cbaaddcd7b3ad606fa6ae9 100644
--- a/src/main/java/net/minecraft/core/dispenser/ProjectileDispenseBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/ProjectileDispenseBehavior.java
@@ -45,7 +45,7 @@ public class ProjectileDispenseBehavior extends DefaultDispenseItemBehavior {
         CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
 
         BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector((double) enumdirection.getStepX(), (double) enumdirection.getStepY(), (double) enumdirection.getStepZ()));
-        if (!DispenserBlock.eventFired) {
+        if (!DispenserBlock.eventFired.get()) {
             worldserver.getCraftServer().getPluginManager().callEvent(event);
         }
 
diff --git a/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java b/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java
index 68632372c8704058f35f12e0ae6cdd98ebd55937..cb6d5c5b3c4d1868b638a007a94f51600a30824a 100644
--- a/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java
@@ -41,7 +41,7 @@ public class ShearsDispenseItemBehavior extends OptionalDispenseItemBehavior {
         CraftItemStack craftItem = CraftItemStack.asCraftMirror(stack); // Paper - ignore stack size on damageable items
 
         BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(0, 0, 0));
-        if (!DispenserBlock.eventFired) {
+        if (!DispenserBlock.eventFired.get()) { // Octopus
             worldserver.getCraftServer().getPluginManager().callEvent(event);
         }
 
diff --git a/src/main/java/net/minecraft/core/dispenser/ShulkerBoxDispenseBehavior.java b/src/main/java/net/minecraft/core/dispenser/ShulkerBoxDispenseBehavior.java
index cb308808906a8cdb127df8284e106e00553473ca..65c52fee25a141052f9151389a8f62bb5d3fdf7d 100644
--- a/src/main/java/net/minecraft/core/dispenser/ShulkerBoxDispenseBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/ShulkerBoxDispenseBehavior.java
@@ -37,7 +37,7 @@ public class ShulkerBoxDispenseBehavior extends OptionalDispenseItemBehavior {
             CraftItemStack craftItem = CraftItemStack.asCraftMirror(stack.copyWithCount(1)); // Paper - single item in event
 
             BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(blockposition.getX(), blockposition.getY(), blockposition.getZ()));
-            if (!DispenserBlock.eventFired) {
+            if (!DispenserBlock.eventFired.get()) { // Octopus
                 pointer.level().getCraftServer().getPluginManager().callEvent(event);
             }
 
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 5a399d0bd1d725d4fc5607bfa918bee80f5a6698..6b56ede8aeee1c489008ffbc7aaa4ad1d0e14244 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1,11 +1,9 @@
 package net.minecraft.server;
 
+import ca.spottedleaf.moonrise.common.util.TickThread;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Splitter;
 import com.google.common.collect.ImmutableList;
-import co.aikar.timings.Timings;
-import com.destroystokyo.paper.event.server.PaperServerListPingEvent;
-import com.google.common.base.Stopwatch;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -30,22 +28,10 @@ import java.nio.file.Files;
 import java.nio.file.LinkOption;
 import java.nio.file.Path;
 import java.security.KeyPair;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
+import java.util.*;
 import java.util.Map.Entry;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Set;
-import java.util.UUID;
-import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.Executor;
+import java.util.concurrent.*;
+import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.BooleanSupplier;
 import java.util.function.Consumer;
@@ -110,11 +96,9 @@ import net.minecraft.util.profiling.EmptyProfileResults;
 import net.minecraft.util.profiling.ProfileResults;
 import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.util.profiling.ResultField;
-import net.minecraft.util.profiling.SingleTickProfiler;
 import net.minecraft.util.profiling.jfr.JvmProfiler;
 import net.minecraft.util.profiling.jfr.callback.ProfiledDuration;
 import net.minecraft.util.profiling.metrics.profiling.ActiveMetricsRecorder;
-import net.minecraft.util.profiling.metrics.profiling.InactiveMetricsRecorder;
 import net.minecraft.util.profiling.metrics.profiling.MetricsRecorder;
 import net.minecraft.util.profiling.metrics.profiling.ServerMetricsSamplersProvider;
 import net.minecraft.util.profiling.metrics.storage.MetricsPersister;
@@ -149,13 +133,13 @@ import net.minecraft.world.level.levelgen.WorldOptions;
 import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager;
 import net.minecraft.world.level.storage.WorldData;
+import org.apache.commons.lang3.tuple.Pair;
 import org.slf4j.Logger;
 
 // CraftBukkit start
 import com.mojang.serialization.Dynamic;
 import com.mojang.serialization.Lifecycle;
 import java.io.File;
-import java.util.Random;
 // import jline.console.ConsoleReader; // Paper
 import joptsimple.OptionSet;
 import net.minecraft.nbt.NbtException;
@@ -373,10 +357,14 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             if (currTime - ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)world).moonrise$getLastMidTickFailure() <= TASK_EXECUTION_FAILURE_BACKOFF) {
                 continue;
             }
-            if (!world.getChunkSource().pollTask()) {
+            if (!world.worldTaskQueueInstance.isFullyHeldByCurrentThread()) { // Octopus
                 // we need to back off if this fails
                 ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)world).moonrise$setLastMidTickFailure(currTime);
             } else {
+                if (!world.worldTaskQueueInstance.pollChunkSystemTask()) { // Octopus
+                    ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)world).moonrise$setLastMidTickFailure(currTime); // Octopus
+                } // Octopus
+
                 executed = true;
             }
         }
@@ -1031,6 +1019,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             if (this.hasStopped) return;
             this.hasStopped = true;
         }
+        this.worldTickExecutor.shutdownNow(); // Octopus
         if (!hasLoggedStop && isDebugging()) io.papermc.paper.util.TraceUtil.dumpTraceForThread("Server stopped"); // Paper - Debugging
         // Paper start - kill main thread, and kill it hard
         shutdownThread = Thread.currentThread();
@@ -1567,7 +1556,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 while (iterator.hasNext()) {
                     ServerLevel worldserver = (ServerLevel) iterator.next();
 
-                    if (worldserver.getChunkSource().pollTask()) {
+                    if (worldserver.getChunkSource().pollTask() || (!this.isIteratingOverLevels && worldserver.worldTaskQueueInstance.pollChunkSystemTask())) { // Octopus
                         ret = true; // Paper - force execution of all worlds, do not just bias the first
                     }
                 }
@@ -1763,6 +1752,15 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
     }
 
+    // Octopus start
+    private final AtomicInteger threadIdGenerator = new AtomicInteger(0);
+    private final ExecutorService worldTickExecutor = Executors.newCachedThreadPool(task -> {
+        final TickThread wrapped = new TickThread(task, "Octopus World Tick Worker - " + threadIdGenerator.getAndIncrement());
+        wrapped.setPriority(6);
+        wrapped.setContextClassLoader(MinecraftServer.class.getClassLoader());
+        return wrapped;
+    });
+    // Octopus end
     public void tickChildren(BooleanSupplier shouldKeepTicking) {
         this.getPlayerList().getPlayers().forEach((entityplayer) -> {
             entityplayer.connection.suspendFlushing();
@@ -1837,6 +1835,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         //MinecraftTimings.timeUpdateTimer.stopTiming(); // Spigot // Paper // Purpur
 
         this.isIteratingOverLevels = true; // Paper - Throw exception on world create while being ticked
+        final Deque<Future<Pair<ServerLevel, Throwable>>> tasks = new ArrayDeque<>();
         Iterator iterator = this.getAllLevels().iterator(); // Paper - Throw exception on world create while being ticked; move down
         while (iterator.hasNext()) {
             ServerLevel worldserver = (ServerLevel) iterator.next();
@@ -1861,6 +1860,9 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
             //this.profiler.push("tick"); // Purpur
 
+            // Octopus start
+            Callable<Pair<ServerLevel, Throwable>> tickingFunction = () -> {
+            worldserver.worldTaskQueueInstance.acquirePoller(); // Octopus
             try {
                 //worldserver.timings.doTick.startTiming(); // Spigot // Purpur
                 long i = Util.getNanos(); // Octopus
@@ -1876,16 +1878,40 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 // Octopus end
                 //worldserver.timings.doTick.stopTiming(); // Spigot // Purpur
             } catch (Throwable throwable) {
-                CrashReport crashreport = CrashReport.forThrowable(throwable, "Exception ticking world");
-
-                worldserver.fillReportDetails(crashreport);
-                throw new ReportedException(crashreport);
-            }
+                return Pair.of(worldserver, throwable);
+            }finally {
+                worldserver.worldTaskQueueInstance.finalizeScopedTasks();
+                worldserver.worldTaskQueueInstance.finalizeCyclicalTasks();
+                worldserver.explosionDensityCache.clear(); // Paper - Optimize explosions // Octopus - Move up
+                worldserver.worldTaskQueueInstance.releasePoller(); // Octopus
+            }
+            return Pair.of(worldserver, null);
+            };
 
+            tasks.add(this.worldTickExecutor.submit(tickingFunction)); // Octopus
+            // Octopus end
             //this.profiler.pop(); // Purpur
             //this.profiler.pop(); // Purpur
-            worldserver.explosionDensityCache.clear(); // Paper - Optimize explosions
+            //worldserver.explosionDensityCache.clear(); // Paper - Optimize explosions // Octopus
+        }
+        // Octopus start
+        Future<Pair<ServerLevel, Throwable>> tickTask;
+        while((tickTask = tasks.poll()) != null) {
+            try {
+                Pair<ServerLevel, Throwable> result = tickTask.get();
+
+                result.getLeft().worldTaskQueueInstance.finalizeCallbackTasks();
+
+                Throwable throwable = result.getRight();
+
+                if (throwable != null) {
+                    throwable.printStackTrace();
+                }
+            }catch (InterruptedException | ExecutionException e) {
+                e.printStackTrace();
+            }
         }
+        // Octopus end
         this.isIteratingOverLevels = false; // Paper - Throw exception on world create while being ticked
 
         //this.profiler.popPush("connection"); // Purpur
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index ebe872c4643038f0c99b289d4d5afdbedd76c6ef..648056c4aa53c59a32002eee9e66268623e30912 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -1,7 +1,6 @@
 package net.minecraft.server.level;
 
 import com.google.common.annotations.VisibleForTesting;
-import com.google.common.collect.Lists;
 import com.mojang.datafixers.DataFixer;
 import java.io.File;
 import java.io.IOException;
@@ -22,7 +21,6 @@ import net.minecraft.network.protocol.Packet;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.progress.ChunkProgressListener;
 import net.minecraft.util.VisibleForDebug;
-import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.util.thread.BlockableEventLoop;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
@@ -98,7 +96,7 @@ public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moon
 
         if (ca.spottedleaf.moonrise.common.util.TickThread.isTickThreadFor(this.level, chunkX, chunkZ)) {
             ca.spottedleaf.moonrise.patches.chunk_system.scheduling.ChunkTaskScheduler.pushChunkWait(this.level, chunkX, chunkZ);
-            this.mainThreadProcessor.managedBlock(completable::isDone);
+            this.level.worldTaskQueueInstance.chunkSystemSpinBlocking(completable::isDone);
             ca.spottedleaf.moonrise.patches.chunk_system.scheduling.ChunkTaskScheduler.popChunkWait();
         }
 
@@ -263,7 +261,7 @@ public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moon
             ServerChunkCache.MainThreadExecutor chunkproviderserver_b = this.mainThreadProcessor;
 
             Objects.requireNonNull(completablefuture);
-            chunkproviderserver_b.managedBlock(completablefuture::isDone);
+            this.level.worldTaskQueueInstance.chunkSystemSpinBlocking(completablefuture::isDone);
         } else {
             completablefuture = CompletableFuture.supplyAsync(() -> {
                 return this.getChunkFutureMainThread(chunkX, chunkZ, leastStatus, create);
@@ -337,6 +335,7 @@ public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moon
     }
 
     public boolean pollTask() {
+        if (true) { return false; } // Octopus
         return this.mainThreadProcessor.pollTask();
     }
 
@@ -613,7 +612,7 @@ public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moon
 
     @VisibleForTesting
     public int getPendingTasksCount() {
-        return this.mainThreadProcessor.getPendingTasksCount();
+        return this.level.worldTaskQueueInstance.chunkSystemTaskQueueSize();
     }
 
     public ChunkGenerator getGenerator() {
@@ -646,7 +645,7 @@ public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moon
 
     @Override
     public void onLightUpdate(LightLayer type, SectionPos pos) {
-        this.mainThreadProcessor.execute(() -> {
+        this.level.worldTaskQueueInstance.submitChunkSystemTask(() -> {
             ChunkHolder playerchunk = this.getVisibleChunkIfPresent(pos.chunk().toLong());
 
             if (playerchunk != null) {
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 705eca91dd6c04707814f763c8ab2af95f6d6c51..dd76df0ba21d008b2ab8b9c7e5e11c61f8454dd3 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -232,6 +232,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
     public boolean hasEntityMoveEvent; // Paper - Add EntityMoveEvent
     private final alternate.current.wire.WireHandler wireHandler = new alternate.current.wire.WireHandler(this); // Paper - optimize redstone (Alternate Current)
     public boolean hasRidableMoveEvent = false; // Purpur
+    public final i.xiaozhangup.octopus.WorldTaskQueue worldTaskQueueInstance = new i.xiaozhangup.octopus.WorldTaskQueue(this);
 
     public LevelChunk getChunkIfLoaded(int x, int z) {
         return this.chunkSource.getChunkAtIfLoadedImmediately(x, z); // Paper - Use getChunkIfLoadedImmediately
@@ -510,6 +511,24 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
     }
     // SparklyPaper end
 
+    // Octopus start
+    public void submitCallbackTask(Runnable task) {
+        worldTaskQueueInstance.submitCallbackTask(task);
+    }
+
+    public void submitScopedTask(Runnable task) {
+        worldTaskQueueInstance.submitScopedTask(task);
+    }
+
+    public void submitCyclicalTask(String id, Runnable task) {
+        worldTaskQueueInstance.submitCyclicalTask(id, task);
+    }
+
+    public Runnable removeCyclicalTask(String id) {
+        return worldTaskQueueInstance.removeCyclicalTask(id);
+    }
+    // Octopus end
+
     // Add env and gen to constructor, IWorldDataServer -> WorldDataServer
     public ServerLevel(MinecraftServer minecraftserver, Executor executor, LevelStorageSource.LevelStorageAccess convertable_conversionsession, PrimaryLevelData iworlddataserver, ResourceKey<Level> resourcekey, LevelStem worlddimension, ChunkProgressListener worldloadlistener, boolean flag, long i, List<CustomSpawner> list, boolean flag1, @Nullable RandomSequences randomsequences, org.bukkit.World.Environment env, org.bukkit.generator.ChunkGenerator gen, org.bukkit.generator.BiomeProvider biomeProvider) {
         // IRegistryCustom.Dimension iregistrycustom_dimension = minecraftserver.registryAccess(); // CraftBukkit - decompile error
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 7aadcaa1785c6560eb1ce2f1179225facca47d84..dadb3c66b15f7cb6f7f5ea54dd4b8be9cf37647d 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -3858,9 +3858,12 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
                         // entity2.bukkitEntity = this.getBukkitEntity();
                         // CraftBukkit end
                     }
+                    worldserver.resetEmptyTime(); // Octopus - Move up
 
-                    entity2.moveTo(teleportTarget.pos().x, teleportTarget.pos().y, teleportTarget.pos().z, teleportTarget.yRot(), entity2.getXRot());
-                    entity2.setDeltaMovement(teleportTarget.speed());
+                    final DimensionTransition finalTeleportTarget = teleportTarget; // Octopus
+                    Runnable scheduledPlace = (() -> { // Octopus
+                    entity2.moveTo(finalTeleportTarget.pos().x, finalTeleportTarget.pos().y, finalTeleportTarget.pos().z, finalTeleportTarget.yRot(), entity2.getXRot());
+                    entity2.setDeltaMovement(finalTeleportTarget.speed());
                     if (this != entity2 && this.inWorld) { // CraftBukkit - Don't spawn the new entity if the current entity isn't spawned
                         worldserver1.addDuringTeleport(entity2);
                     }
@@ -3868,13 +3871,20 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
                     Iterator iterator1 = list1.iterator();
 
                     while (iterator1.hasNext()) {
-                        entity = (Entity) iterator1.next();
-                        entity.startRiding(entity2, true);
+                        Entity entity3 = (Entity) iterator1.next(); // Octopus
+                        entity3.startRiding(entity2, true); // Octopus
                     }
 
-                    worldserver.resetEmptyTime();
+                    //worldserver.resetEmptyTime(); // Octopus
                     worldserver1.resetEmptyTime();
-                    teleportTarget.postDimensionTransition().onTransition(entity2);
+                    finalTeleportTarget.postDimensionTransition().onTransition(entity2);
+                    }); // Octopus
+                    // Octopus start
+                    if (!worldserver1.getServer().isIteratingOverLevels)
+                        scheduledPlace.run();
+                    else
+                        worldserver1.worldTaskQueueInstance.submitScopedTask(scheduledPlace);
+                    // Octopus end
                 }
 
                 //worldserver.getProfiler().pop(); // Purpur
@@ -4064,15 +4074,23 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
             if (entity == null) {
                 return false;
             }
-
+            this.setRemoved(Entity.RemovalReason.CHANGED_DIMENSION, null); // CraftBukkit - add Bukkit remove cause // Octopus - Move up
+            Runnable scheduledPostProcess = () ->{
             entity.restoreFrom(this);
             entity.moveTo(destX, destY, destZ, yaw, f2);
             entity.setYHeadRot(yaw);
-            this.setRemoved(Entity.RemovalReason.CHANGED_DIMENSION, null); // CraftBukkit - add Bukkit remove cause
+            //this.setRemoved(Entity.RemovalReason.CHANGED_DIMENSION, null); // CraftBukkit - add Bukkit remove cause // Octopus
             // CraftBukkit start - Don't spawn the new entity if the current entity isn't spawned
             if (this.inWorld) {
                 world.addDuringTeleport(entity);
             }
+            }; // Octopus
+            // Octopus - start
+            if (!world.getServer().isIteratingOverLevels)
+                scheduledPostProcess.run();
+            else
+                world.worldTaskQueueInstance.submitScopedTask(scheduledPostProcess);
+            // Octopus - end
             // CraftBukkit end
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/GoToPotentialJobSite.java b/src/main/java/net/minecraft/world/entity/ai/behavior/GoToPotentialJobSite.java
index aac1df9e2c0652bc6348af0404deba7465f82d42..56bd28cabe92b1ad483f1669f9bff4f0350ce75d 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/GoToPotentialJobSite.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/GoToPotentialJobSite.java
@@ -49,10 +49,17 @@ public class GoToPotentialJobSite extends Behavior<Villager> {
             ServerLevel serverLevel2 = serverLevel.getServer().getLevel(pos.dimension());
             if (serverLevel2 != null) {
                 PoiManager poiManager = serverLevel2.getPoiManager();
+                //Octopus start - Fix off world POI accessing
+                java.lang.Runnable scheduledRelease = () -> {
                 if (poiManager.exists(blockPos, poiType -> true)) {
                     poiManager.release(blockPos);
                 }
-
+                };
+                if (!ca.spottedleaf.moonrise.common.util.TickThread.isTickThreadFor(serverLevel2, blockPos))
+                    serverLevel2.worldTaskQueueInstance.submitScopedTask(scheduledRelease);
+                else
+                    scheduledRelease.run();
+                //Octopus end
                 DebugPackets.sendPoiTicketCountPacket(serverLevel, blockPos);
             }
         });
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/YieldJobSite.java b/src/main/java/net/minecraft/world/entity/ai/behavior/YieldJobSite.java
index d1a9b62d3304916275dd6b4c4e783cf1563b5e21..4f801d74be1a391e460814bc2b489936b549c099 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/YieldJobSite.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/YieldJobSite.java
@@ -33,7 +33,10 @@ public class YieldJobSite {
                                 } else if (entity.getVillagerData().getProfession() != VillagerProfession.NONE) {
                                     return false;
                                 } else {
-                                    BlockPos blockPos = context.<GlobalPos>get(potentialJobSite).pos();
+                                    final GlobalPos globalPos = context.<GlobalPos>get(potentialJobSite); //Octopus start - Fix off world POI accessing
+                                    final net.minecraft.server.level.ServerLevel targetLevel = net.minecraft.server.MinecraftServer.getServer().getLevel(globalPos.dimension()); //Octopus start - Fix off world POI accessing
+                                    BlockPos blockPos = globalPos.pos(); //Octopus start - Fix off world POI accessing
+                                    if (!ca.spottedleaf.moonrise.common.util.TickThread.isTickThreadFor(targetLevel, blockPos)) return true; //Octopus start - Fix off world POI accessing
                                     Optional<Holder<PoiType>> optional = world.getPoiManager().getType(blockPos);
                                     if (optional.isEmpty()) {
                                         return true;
diff --git a/src/main/java/net/minecraft/world/item/ArmorItem.java b/src/main/java/net/minecraft/world/item/ArmorItem.java
index d05b1e129eee07434d162e1b949fd5633418ef66..fa97e9d75f8b784b6861534d81e8b7daf9308e38 100644
--- a/src/main/java/net/minecraft/world/item/ArmorItem.java
+++ b/src/main/java/net/minecraft/world/item/ArmorItem.java
@@ -68,7 +68,7 @@ public class ArmorItem extends Item implements Equipable {
             CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
 
             BlockDispenseArmorEvent event = new BlockDispenseArmorEvent(block, craftItem.clone(), (org.bukkit.craftbukkit.entity.CraftLivingEntity) entityliving.getBukkitEntity());
-            if (!DispenserBlock.eventFired) {
+            if (!DispenserBlock.eventFired.get()) {
                 world.getCraftServer().getPluginManager().callEvent(event);
             }
 
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index 9d9af312037c96c7773a456e37e6425f7004e73a..a286f958095a84415433441c8a6310769e00aed2 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -442,8 +442,8 @@ public final class ItemStack implements DataComponentHolder {
             if (enuminteractionresult.consumesAction() && world.captureTreeGeneration && world.capturedBlockStates.size() > 0) {
                 world.captureTreeGeneration = false;
                 Location location = CraftLocation.toBukkit(blockposition, world.getWorld());
-                TreeType treeType = SaplingBlock.treeType;
-                SaplingBlock.treeType = null;
+                TreeType treeType = SaplingBlock.treeTypeRT.get();
+                SaplingBlock.treeTypeRT.remove();
                 List<CraftBlockState> blocks = new java.util.ArrayList<>(world.capturedBlockStates.values());
                 world.capturedBlockStates.clear();
                 StructureGrowEvent structureEvent = null;
diff --git a/src/main/java/net/minecraft/world/item/MinecartItem.java b/src/main/java/net/minecraft/world/item/MinecartItem.java
index 4b8cebb321eddc852b4ec7def7f51d781f67927b..72c3eb48cb21c025a954abedf8ca59e972375e3a 100644
--- a/src/main/java/net/minecraft/world/item/MinecartItem.java
+++ b/src/main/java/net/minecraft/world/item/MinecartItem.java
@@ -71,7 +71,7 @@ public class MinecartItem extends Item {
             CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
 
             BlockDispenseEvent event = new BlockDispenseEvent(block2, craftItem.clone(), new org.bukkit.util.Vector(d0, d1 + d3, d2));
-            if (!DispenserBlock.eventFired) {
+            if (!DispenserBlock.eventFired.get()) {
                 worldserver.getCraftServer().getPluginManager().callEvent(event);
             }
 
diff --git a/src/main/java/net/minecraft/world/level/block/DispenserBlock.java b/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
index e1021d8be840f378568f28639c259182055c78ac..c962f5fbe1967cc27f88f363b1a3aa6f02aef812 100644
--- a/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
@@ -51,7 +51,8 @@ public class DispenserBlock extends BaseEntityBlock {
         object2objectopenhashmap.defaultReturnValue(DispenserBlock.DEFAULT_BEHAVIOR);
     });
     private static final int TRIGGER_DURATION = 4;
-    public static boolean eventFired = false; // CraftBukkit
+    // public static boolean eventFired = false; // CraftBukkit // Octopus
+    public static ThreadLocal<Boolean> eventFired = ThreadLocal.withInitial(() -> Boolean.FALSE); // Octopus
 
     @Override
     public MapCodec<? extends DispenserBlock> codec() {
@@ -110,7 +111,7 @@ public class DispenserBlock extends BaseEntityBlock {
 
                 if (idispensebehavior != DispenseItemBehavior.NOOP) {
                     if (!org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockPreDispenseEvent(world, pos, itemstack, i)) return; // Paper - Add BlockPreDispenseEvent
-                    DispenserBlock.eventFired = false; // CraftBukkit - reset event status
+                    DispenserBlock.eventFired.set(Boolean.FALSE); // CraftBukkit - reset event status // Octopus
                     tileentitydispenser.setItem(i, idispensebehavior.dispense(sourceblock, itemstack));
                 }
 
diff --git a/src/main/java/net/minecraft/world/level/block/FungusBlock.java b/src/main/java/net/minecraft/world/level/block/FungusBlock.java
index 454f95ba814b375e97189430b498c0e7486fbd94..52186c0f3dfe802c14801edff08113232e151446 100644
--- a/src/main/java/net/minecraft/world/level/block/FungusBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FungusBlock.java
@@ -76,9 +76,9 @@ public class FungusBlock extends BushBlock implements BonemealableBlock {
         this.getFeature(world).ifPresent((holder) -> {
             // CraftBukkit start
             if (this == Blocks.WARPED_FUNGUS) {
-                SaplingBlock.treeType = org.bukkit.TreeType.WARPED_FUNGUS;
+                SaplingBlock.treeTypeRT.set(org.bukkit.TreeType.WARPED_FUNGUS); // Octopus
             } else if (this == Blocks.CRIMSON_FUNGUS) {
-                SaplingBlock.treeType = org.bukkit.TreeType.CRIMSON_FUNGUS;
+                SaplingBlock.treeTypeRT.set(org.bukkit.TreeType.CRIMSON_FUNGUS); // Octopus
             }
             // CraftBukkit end
             ((ConfiguredFeature) holder.value()).place(world, world.getChunkSource().getGenerator(), random, pos);
diff --git a/src/main/java/net/minecraft/world/level/block/MushroomBlock.java b/src/main/java/net/minecraft/world/level/block/MushroomBlock.java
index 1172d85c5c26ab2142343d91149766e5993cb36a..02cce8fe93781aa4434c9888acd67d57d7f34ed0 100644
--- a/src/main/java/net/minecraft/world/level/block/MushroomBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MushroomBlock.java
@@ -105,7 +105,7 @@ public class MushroomBlock extends BushBlock implements BonemealableBlock {
             return false;
         } else {
             world.removeBlock(pos, false);
-            SaplingBlock.treeType = (this == Blocks.BROWN_MUSHROOM) ? TreeType.BROWN_MUSHROOM : TreeType.RED_MUSHROOM; // CraftBukkit
+            SaplingBlock.treeTypeRT.set((this == Blocks.BROWN_MUSHROOM) ? TreeType.BROWN_MUSHROOM : TreeType.RED_MUSHROOM); // CraftBukkit // Octopus
             if (((ConfiguredFeature) ((Holder) optional.get()).value()).place(world, world.getChunkSource().getGenerator(), random, pos)) {
                 return true;
             } else {
diff --git a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
index c131734cad123a35456d18f8a161f77a4ac9ac99..29d29e95fa504e3ac4a2b39c21ee5cfb74a5372a 100644
--- a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
@@ -260,7 +260,7 @@ public class RedStoneWireBlock extends Block {
 
     // Paper start - Optimize redstone (Eigencraft)
     // The bulk of the new functionality is found in RedstoneWireTurbo.java
-    com.destroystokyo.paper.util.RedstoneWireTurbo turbo = new com.destroystokyo.paper.util.RedstoneWireTurbo(this);
+    // com.destroystokyo.paper.util.RedstoneWireTurbo turbo = new com.destroystokyo.paper.util.RedstoneWireTurbo(this); // Octopus (moved to world)
 
     /*
      * Modified version of pre-existing updateSurroundingRedstone, which is called from
@@ -269,8 +269,8 @@ public class RedStoneWireBlock extends Block {
      */
     private void updateSurroundingRedstone(Level worldIn, BlockPos pos, BlockState state, BlockPos source) {
         if (worldIn.paperConfig().misc.redstoneImplementation == io.papermc.paper.configuration.WorldConfiguration.Misc.RedstoneImplementation.EIGENCRAFT) {
-            turbo.updateSurroundingRedstone(worldIn, pos, state, source);
-            return;
+            //worldIn.turbo.updateSurroundingRedstone(worldIn, pos, state, source); // Octopus
+            //return; // Octopus
         }
         updatePowerStrength(worldIn, pos, state);
     }
@@ -292,7 +292,7 @@ public class RedStoneWireBlock extends Block {
         int k = worldIn.getBestNeighborSignal(pos1);
         this.shouldSignal = true;
 
-        if (worldIn.paperConfig().misc.redstoneImplementation == io.papermc.paper.configuration.WorldConfiguration.Misc.RedstoneImplementation.VANILLA) {
+        if (true || worldIn.paperConfig().misc.redstoneImplementation == io.papermc.paper.configuration.WorldConfiguration.Misc.RedstoneImplementation.VANILLA) { // Octopus
             // This code is totally redundant to if statements just below the loop.
             if (k > 0 && k > j - 1) {
                 j = k;
@@ -306,7 +306,7 @@ public class RedStoneWireBlock extends Block {
         // redstone wire will be set to 'k'.  If 'k' is already 15, then nothing inside the
         // following loop can affect the power level of the wire.  Therefore, the loop is
         // skipped if k is already 15.
-        if (worldIn.paperConfig().misc.redstoneImplementation == io.papermc.paper.configuration.WorldConfiguration.Misc.RedstoneImplementation.VANILLA || k < 15) {
+        if ((true || worldIn.paperConfig().misc.redstoneImplementation == io.papermc.paper.configuration.WorldConfiguration.Misc.RedstoneImplementation.VANILLA) || k < 15) { // Octopus
             for (Direction enumfacing : Direction.Plane.HORIZONTAL) {
                 BlockPos blockpos = pos1.relative(enumfacing);
                 boolean flag = blockpos.getX() != pos2.getX() || blockpos.getZ() != pos2.getZ();
@@ -325,7 +325,7 @@ public class RedStoneWireBlock extends Block {
             }
         }
 
-        if (worldIn.paperConfig().misc.redstoneImplementation == io.papermc.paper.configuration.WorldConfiguration.Misc.RedstoneImplementation.VANILLA) {
+        if (true || worldIn.paperConfig().misc.redstoneImplementation == io.papermc.paper.configuration.WorldConfiguration.Misc.RedstoneImplementation.VANILLA) { // Octopus
             // The old code would decrement the wire value only by 1 at a time.
             if (l > j) {
                 j = l - 1;
@@ -359,8 +359,8 @@ public class RedStoneWireBlock extends Block {
             if (worldIn.getBlockState(pos1) == iblockstate) {
                 // [Space Walker] suppress shape updates and emit those manually to
                 // bypass the new neighbor update stack.
-                if (worldIn.setBlock(pos1, state, Block.UPDATE_KNOWN_SHAPE | Block.UPDATE_CLIENTS))
-                    turbo.updateNeighborShapes(worldIn, pos1, state);
+                //if (worldIn.setBlock(pos1, state, Block.UPDATE_KNOWN_SHAPE | Block.UPDATE_CLIENTS)) // Octopus
+                    //worldIn.turbo.updateNeighborShapes(worldIn, pos1, state); // Octopus
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/SaplingBlock.java b/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
index d262a5a6da57ef9ba9a6fe0dfbc88f577105e74f..55dce71c9ea273f46554edc7da2f622333b52734 100644
--- a/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
@@ -35,7 +35,7 @@ public class SaplingBlock extends BushBlock implements BonemealableBlock {
     protected static final float AABB_OFFSET = 6.0F;
     protected static final VoxelShape SHAPE = Block.box(2.0D, 0.0D, 2.0D, 14.0D, 12.0D, 14.0D);
     protected final TreeGrower treeGrower;
-    public static TreeType treeType; // CraftBukkit
+    public static final ThreadLocal<TreeType> treeTypeRT = new ThreadLocal<>(); // CraftBukkit // Octopus (from Folia)
 
     @Override
     public MapCodec<? extends SaplingBlock> codec() {
@@ -73,8 +73,8 @@ public class SaplingBlock extends BushBlock implements BonemealableBlock {
                 this.treeGrower.growTree(world, world.getChunkSource().getGenerator(), pos, state, random);
                 world.captureTreeGeneration = false;
                 if (world.capturedBlockStates.size() > 0) {
-                    TreeType treeType = SaplingBlock.treeType;
-                    SaplingBlock.treeType = null;
+                    TreeType treeType = SaplingBlock.treeTypeRT.get(); // Octopus
+                    SaplingBlock.treeTypeRT.set(null); // Octopus
                     Location location = CraftLocation.toBukkit(pos, world.getWorld());
                     java.util.List<BlockState> blocks = new java.util.ArrayList<>(world.capturedBlockStates.values());
                     world.capturedBlockStates.clear();
diff --git a/src/main/java/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java
index a74732902c0494c67e6acf2fc04581ff9c46b832..2fd51afb54c859c2142f076c2c1429061eb44d40 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java
@@ -46,9 +46,9 @@ public class SculkCatalystBlockEntity extends BlockEntity implements GameEventLi
     // Paper end - Fix NPE in SculkBloomEvent world access
 
     public static void serverTick(Level world, BlockPos pos, BlockState state, SculkCatalystBlockEntity blockEntity) {
-        org.bukkit.craftbukkit.event.CraftEventFactory.sourceBlockOverride = blockEntity.getBlockPos(); // CraftBukkit - SPIGOT-7068: Add source block override, not the most elegant way but better than passing down a BlockPosition up to five methods deep.
+        org.bukkit.craftbukkit.event.CraftEventFactory.sourceBlockOverrideRT.set(blockEntity.getBlockPos()); // Octopus // CraftBukkit - SPIGOT-7068: Add source block override, not the most elegant way but better than passing down a BlockPosition up to five methods deep.
         blockEntity.catalystListener.getSculkSpreader().updateCursors(world, pos, world.getRandom(), true);
-        org.bukkit.craftbukkit.event.CraftEventFactory.sourceBlockOverride = null; // CraftBukkit
+        org.bukkit.craftbukkit.event.CraftEventFactory.sourceBlockOverrideRT.set(null); // Octopus // CraftBukkit
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/grower/TreeGrower.java b/src/main/java/net/minecraft/world/level/block/grower/TreeGrower.java
index 597599138f69c9ee05dc7657c51c25336337875e..9fe2d001bb835eff2b45b00f5ebc3613c34e4927 100644
--- a/src/main/java/net/minecraft/world/level/block/grower/TreeGrower.java
+++ b/src/main/java/net/minecraft/world/level/block/grower/TreeGrower.java
@@ -174,51 +174,53 @@ public final class TreeGrower {
     // CraftBukkit start
     private void setTreeType(Holder<ConfiguredFeature<?, ?>> holder) {
         ResourceKey<ConfiguredFeature<?, ?>> worldgentreeabstract = holder.unwrapKey().get();
+        TreeType treeType; // Octopus
         if (worldgentreeabstract == TreeFeatures.OAK || worldgentreeabstract == TreeFeatures.OAK_BEES_005) {
-            SaplingBlock.treeType = TreeType.TREE;
+            treeType = TreeType.TREE;
         } else if (worldgentreeabstract == TreeFeatures.HUGE_RED_MUSHROOM) {
-            SaplingBlock.treeType = TreeType.RED_MUSHROOM;
+            treeType = TreeType.RED_MUSHROOM;
         } else if (worldgentreeabstract == TreeFeatures.HUGE_BROWN_MUSHROOM) {
-            SaplingBlock.treeType = TreeType.BROWN_MUSHROOM;
+            treeType = TreeType.BROWN_MUSHROOM;
         } else if (worldgentreeabstract == TreeFeatures.JUNGLE_TREE) {
-            SaplingBlock.treeType = TreeType.COCOA_TREE;
+            treeType = TreeType.COCOA_TREE;
         } else if (worldgentreeabstract == TreeFeatures.JUNGLE_TREE_NO_VINE) {
-            SaplingBlock.treeType = TreeType.SMALL_JUNGLE;
+            treeType = TreeType.SMALL_JUNGLE;
         } else if (worldgentreeabstract == TreeFeatures.PINE) {
-            SaplingBlock.treeType = TreeType.TALL_REDWOOD;
+            treeType = TreeType.TALL_REDWOOD;
         } else if (worldgentreeabstract == TreeFeatures.SPRUCE) {
-            SaplingBlock.treeType = TreeType.REDWOOD;
+            treeType = TreeType.REDWOOD;
         } else if (worldgentreeabstract == TreeFeatures.ACACIA) {
-            SaplingBlock.treeType = TreeType.ACACIA;
+            treeType = TreeType.ACACIA;
         } else if (worldgentreeabstract == TreeFeatures.BIRCH || worldgentreeabstract == TreeFeatures.BIRCH_BEES_005) {
-            SaplingBlock.treeType = TreeType.BIRCH;
+            treeType = TreeType.BIRCH;
         } else if (worldgentreeabstract == TreeFeatures.SUPER_BIRCH_BEES_0002) {
-            SaplingBlock.treeType = TreeType.TALL_BIRCH;
+            treeType = TreeType.TALL_BIRCH;
         } else if (worldgentreeabstract == TreeFeatures.SWAMP_OAK) {
-            SaplingBlock.treeType = TreeType.SWAMP;
+            treeType = TreeType.SWAMP;
         } else if (worldgentreeabstract == TreeFeatures.FANCY_OAK || worldgentreeabstract == TreeFeatures.FANCY_OAK_BEES_005) {
-            SaplingBlock.treeType = TreeType.BIG_TREE;
+            treeType = TreeType.BIG_TREE;
         } else if (worldgentreeabstract == TreeFeatures.JUNGLE_BUSH) {
-            SaplingBlock.treeType = TreeType.JUNGLE_BUSH;
+            treeType = TreeType.JUNGLE_BUSH;
         } else if (worldgentreeabstract == TreeFeatures.DARK_OAK) {
-            SaplingBlock.treeType = TreeType.DARK_OAK;
+            treeType = TreeType.DARK_OAK;
         } else if (worldgentreeabstract == TreeFeatures.MEGA_SPRUCE) {
-            SaplingBlock.treeType = TreeType.MEGA_REDWOOD;
+            treeType = TreeType.MEGA_REDWOOD;
         } else if (worldgentreeabstract == TreeFeatures.MEGA_PINE) {
-            SaplingBlock.treeType = TreeType.MEGA_PINE;
+            treeType = TreeType.MEGA_PINE;
         } else if (worldgentreeabstract == TreeFeatures.MEGA_JUNGLE_TREE) {
-            SaplingBlock.treeType = TreeType.JUNGLE;
+            treeType = TreeType.JUNGLE;
         } else if (worldgentreeabstract == TreeFeatures.AZALEA_TREE) {
-            SaplingBlock.treeType = TreeType.AZALEA;
+            treeType = TreeType.AZALEA;
         } else if (worldgentreeabstract == TreeFeatures.MANGROVE) {
-            SaplingBlock.treeType = TreeType.MANGROVE;
+            treeType = TreeType.MANGROVE;
         } else if (worldgentreeabstract == TreeFeatures.TALL_MANGROVE) {
-            SaplingBlock.treeType = TreeType.TALL_MANGROVE;
+            treeType = TreeType.TALL_MANGROVE;
         } else if (worldgentreeabstract == TreeFeatures.CHERRY || worldgentreeabstract == TreeFeatures.CHERRY_BEES_005) {
-            SaplingBlock.treeType = TreeType.CHERRY;
+            treeType = TreeType.CHERRY;
         } else {
             throw new IllegalArgumentException("Unknown tree generator " + worldgentreeabstract);
         }
+        SaplingBlock.treeTypeRT.set(treeType); // Octopus
     }
     // CraftBukkit end
 
diff --git a/src/main/java/net/minecraft/world/level/saveddata/maps/MapIndex.java b/src/main/java/net/minecraft/world/level/saveddata/maps/MapIndex.java
index 763b315b1d761bc3bd82d9b847ed3f64fd5ce991..117346c47446fefd36534964d0693ef70c42ccc1 100644
--- a/src/main/java/net/minecraft/world/level/saveddata/maps/MapIndex.java
+++ b/src/main/java/net/minecraft/world/level/saveddata/maps/MapIndex.java
@@ -34,17 +34,21 @@ public class MapIndex extends SavedData {
 
     @Override
     public CompoundTag save(CompoundTag nbt, HolderLookup.Provider registryLookup) {
+        synchronized (this.usedAuxIds) { // Octopus
         for (Entry<String> entry : this.usedAuxIds.object2IntEntrySet()) {
             nbt.putInt(entry.getKey(), entry.getIntValue());
         }
+        } // Octopus
 
         return nbt;
     }
 
     public MapId getFreeAuxValueForMap() {
+        synchronized (this.usedAuxIds) { // Octopus
         int i = this.usedAuxIds.getInt("map") + 1;
         this.usedAuxIds.put("map", i);
         this.setDirty();
         return new MapId(i);
+        } // Octopus
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 48912de0c47007be3281e5b6c468d276d7f52e9f..ee0dc888e047a410a3dee7c0d36bc6f8ad8e82e3 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -427,7 +427,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         ca.spottedleaf.moonrise.common.util.ChunkSystem.scheduleChunkLoad(
             this.world, x, z, false, ChunkStatus.EMPTY, true, ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor.Priority.NORMAL, future::complete
         );
-        world.getChunkSource().mainThreadProcessor.managedBlock(future::isDone);
+        world.worldTaskQueueInstance.chunkSystemSpinBlocking(future::isDone);
         return future.thenApply(c -> {
             if (c != null) {
                 return c.getPersistedStatus() == ChunkStatus.FULL;
@@ -2448,6 +2448,26 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         return world.getTickTimes();
     }
 
+    @Override
+    public void submitCallbackTask(Runnable task) {
+        world.submitCallbackTask(task);
+    }
+
+    @Override
+    public void submitScopedTask(Runnable task) {
+        world.submitScopedTask(task);
+    }
+
+    @Override
+    public void submitCyclicalTask(String id, Runnable task) {
+        world.submitCyclicalTask(id, task);
+    }
+
+    @Override
+    public Runnable removeCyclicalTask(String id) {
+        return world.removeCyclicalTask(id);
+    }
+
     private List<GeneratedStructure> getStructures(int x, int z, Predicate<net.minecraft.world.level.levelgen.structure.Structure> predicate) {
         List<GeneratedStructure> structures = new ArrayList<>();
         for (StructureStart start : this.getHandle().structureManager().startsForStructure(new ChunkPos(x, z), predicate)) {
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index ac11f18690434922179b61ffcc3036dea025b0cb..a80d39feedc894e6096dc80e5295388306f662b5 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -554,8 +554,8 @@ public class CraftBlock implements Block {
         world.captureTreeGeneration = false;
 
         if (world.capturedBlockStates.size() > 0) {
-            TreeType treeType = SaplingBlock.treeType;
-            SaplingBlock.treeType = null;
+            TreeType treeType = SaplingBlock.treeTypeRT.get();
+            SaplingBlock.treeTypeRT.remove();
             List<BlockState> blocks = new ArrayList<>(world.capturedBlockStates.values());
             world.capturedBlockStates.clear();
             StructureGrowEvent structureEvent = null;
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
index 04ae258a2f8e98421340d29d5cceedec045171b7..a05696971e6a60eb128dd42d3fb1ae6c4cadf49f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
@@ -25,7 +25,7 @@ public abstract class CraftBlockEntityState<T extends BlockEntity> extends Craft
     private final T tileEntity;
     private final T snapshot;
     public boolean snapshotDisabled; // Paper
-    public static boolean DISABLE_SNAPSHOT = false; // Paper
+    public static ThreadLocal<Boolean> DISABLE_SNAPSHOT = ThreadLocal.withInitial(() -> Boolean.FALSE); // Octopus
 
     public CraftBlockEntityState(World world, T tileEntity) {
         super(world, tileEntity.getBlockPos(), tileEntity.getBlockState());
@@ -34,8 +34,8 @@ public abstract class CraftBlockEntityState<T extends BlockEntity> extends Craft
 
         try { // Paper - Show blockstate location if we failed to read it
         // Paper start
-        this.snapshotDisabled = DISABLE_SNAPSHOT;
-        if (DISABLE_SNAPSHOT) {
+        this.snapshotDisabled = DISABLE_SNAPSHOT.get(); // Octopus
+        if (DISABLE_SNAPSHOT.get()) { // Octopus
             this.snapshot = this.tileEntity;
         } else {
             this.snapshot = this.createSnapshot(tileEntity);
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockStates.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockStates.java
index b7ff7af2513204b151340538d50a65c850bdb75f..e20ef874952d659a9f6539da1109909d0aca1283 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockStates.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockStates.java
@@ -247,8 +247,8 @@ public final class CraftBlockStates {
         net.minecraft.world.level.block.state.BlockState blockData = craftBlock.getNMS();
         BlockEntity tileEntity = craftBlock.getHandle().getBlockEntity(blockPosition);
         // Paper start - block state snapshots
-        boolean prev = CraftBlockEntityState.DISABLE_SNAPSHOT;
-        CraftBlockEntityState.DISABLE_SNAPSHOT = !useSnapshot;
+        boolean prev = CraftBlockEntityState.DISABLE_SNAPSHOT.get(); // Octopus
+        CraftBlockEntityState.DISABLE_SNAPSHOT.set(!useSnapshot); // Octopus
         try {
         // Paper end
         CraftBlockState blockState = CraftBlockStates.getBlockState(world, blockPosition, blockData, tileEntity);
@@ -256,7 +256,7 @@ public final class CraftBlockStates {
         return blockState;
         // Paper start
         } finally {
-            CraftBlockEntityState.DISABLE_SNAPSHOT = prev;
+            CraftBlockEntityState.DISABLE_SNAPSHOT.set(prev); // Octopus
         }
         // Paper end
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index 858c6c860d9b8aaa1d3f9f77a9e410726239d7cc..d8f39bc3be97a99dc6357fe60ce55dfdf0eab001 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -962,7 +962,7 @@ public class CraftEventFactory {
         return CraftEventFactory.handleBlockSpreadEvent(world, source, target, block, 2);
     }
 
-    public static BlockPos sourceBlockOverride = null; // SPIGOT-7068: Add source block override, not the most elegant way but better than passing down a BlockPosition up to five methods deep.
+    public static final ThreadLocal<BlockPos> sourceBlockOverrideRT = new ThreadLocal<>(); // SPIGOT-7068: Add source block override, not the most elegant way but better than passing down a BlockPosition up to five methods deep. // Octopus (this is from Folia, fixes concurrency bugs with sculk catalysts)
 
     public static boolean handleBlockSpreadEvent(LevelAccessor world, BlockPos source, BlockPos target, net.minecraft.world.level.block.state.BlockState block, int flag) {
         // Suppress during worldgen
@@ -974,7 +974,7 @@ public class CraftEventFactory {
         CraftBlockState state = CraftBlockStates.getBlockState(world, target, flag);
         state.setData(block);
 
-        BlockSpreadEvent event = new BlockSpreadEvent(state.getBlock(), CraftBlock.at(world, CraftEventFactory.sourceBlockOverride != null ? CraftEventFactory.sourceBlockOverride : source), state);
+        BlockSpreadEvent event = new BlockSpreadEvent(state.getBlock(), CraftBlock.at(world, CraftEventFactory.sourceBlockOverrideRT.get() != null ? CraftEventFactory.sourceBlockOverrideRT.get() : source), state); // Octopus
         Bukkit.getPluginManager().callEvent(event);
 
         if (!event.isCancelled()) {
@@ -2235,7 +2235,7 @@ public class CraftEventFactory {
         CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemStack.copyWithCount(1));
 
         org.bukkit.event.block.BlockDispenseEvent event = new org.bukkit.event.block.BlockDispenseEvent(bukkitBlock, craftItem.clone(), CraftVector.toBukkit(to));
-        if (!net.minecraft.world.level.block.DispenserBlock.eventFired) {
+        if (!net.minecraft.world.level.block.DispenserBlock.eventFired.get()) { // Octopus
             if (!event.callEvent()) {
                 return itemStack;
             }
